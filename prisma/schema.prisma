generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_PRISMA_URL")
  directUrl  = env("POSTGRES_URL_NON_POOLING")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model Company {
  id           String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  companyName  String        @unique() @db.VarChar(255)
  ownerId      String?       @db.Uuid
  apiKey       String?       @db.VarChar(32)
  createdAt    DateTime      @default(now()) @db.Timestamptz(6)
  createdBy    String?       @db.Uuid
  expireDate   DateTime?     @db.Timestamptz(6)
  logo         String?       @db.VarChar(255)
  isActive     Boolean       @default(true)
  isDeleted    Boolean       @default(false)
  isPending    Boolean       @default(false)
  isTrial      Boolean       @default(true)
  updatedAt    DateTime      @default(now()) @db.Timestamptz(6)
  subscription Subscription?
}

model User {
  id                    String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  cid                   String?                @db.Uuid
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now()) @db.Timestamptz(6)
  createdBy             String?                @db.Uuid
  isActive              Boolean                @default(true)
  isDeleted             Boolean                @default(false)
  accounts              Account[]
  LoginActivity         LoginActivity[]
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String 
  refresh_token      String? 
  access_token       String? 
  token_type         String? 
  scope             String?
  id_token           String? 
  session_token      String? 
  expires_at         Int?  
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LoginActivity {
  id             String    @id @default(cuid())
  userId         String    @db.Uuid
  loggedIn       DateTime  @default(now()) @db.Timestamptz(6)
  loggedOut      DateTime? @db.Timestamptz(6)
  browser        String?
  cpu            String?
  device         String?
  isMobile       Boolean?
  os             String?
  browserVersion String?
  deviceVendor   String?
  osVersion      String?
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                   String    @id @default(cuid())
  cid                  String    @unique @db.Uuid
  status               String?
  stripeSubscriptionId String    @unique
  createdAt            DateTime  @default(now()) @db.Timestamptz(6)
  expiresAt            DateTime? @db.Timestamptz(6)
  interval             String?
  isActive             Boolean   @default(true)
  updatedAt            DateTime  @default(now()) @db.Timestamptz(6)
  userId               String    @db.Uuid
  priceId              String
  productId            String
  quantity             Int       @default(1)
  subscriptionObj      String?
  company              Company   @relation(fields: [cid], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}
