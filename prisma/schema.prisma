// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")

  extensions = [uuid_ossp(map: "uuid-ossp")]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

model Company {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  company_name String    @db.VarChar(255)
  owner_id     String?   @db.Uuid
  api_key      String    @db.VarChar(32)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  created_by   String?   @db.Uuid
  expire_date  DateTime? @db.Timestamptz(6)
  logo         String?   @db.VarChar(255)
  is_active    Boolean   @default(true)
  is_deleted   Boolean   @default(false)
  is_pending   Boolean   @default(false)
  is_trial     Boolean   @default(true)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@unique([company_name])
}

model User {
  id                    String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  cid                   String?                @db.Uuid
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  created_at            DateTime               @default(now()) @db.Timestamptz(6)
  created_by            String?                @db.Uuid
  is_active             Boolean                @default(true)
  is_deleted            Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
